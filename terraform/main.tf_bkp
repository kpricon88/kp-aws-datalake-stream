provider "aws" {
  region = var.aws_region
}

resource "aws_dynamodb_table" "items" {
  name         = "kp-dynamo-landing-tbl"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "id"
  range_key    = "srt_ky"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "srt_ky"
    type = "S"
  }

  stream_enabled   = true
  stream_view_type = "NEW_IMAGE"
}

resource "aws_s3_bucket" "landing_zone" {
  bucket        = "dynamodb-landing-zone-example"
  force_destroy = true
}

resource "aws_s3_bucket" "cleansed_zone" {
  bucket        = "dynamodb-cleansed-zone-example"
  force_destroy = true
}

resource "aws_s3_bucket" "golden_zone" {
  bucket        = "s3-golden-bucket-kp-dev"
  force_destroy = true
  region        = "us-east-1"
}

resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_basic_exec" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}


resource "aws_lambda_function" "dynamo_stream_handler" {
  filename      = "${path.module}/../lambda/dynamo_stream_to_s3.py.zip"
  function_name = "DynamoStreamToS3"
  role          = aws_iam_role.lambda_exec_role.arn
  handler       = "dynamo_stream_to_s3.lambda_handler"
  runtime       = "python3.9"
  timeout       = 5

  environment {
    variables = {
      DEST_BUCKET = aws_s3_bucket.landing_zone.bucket
    }
  }

  source_code_hash = filebase64sha256("${path.module}/../lambda/dynamo_stream_to_s3.py.zip")
}

resource "aws_lambda_function" "landing_to_cleansed" {
  function_name    = "LandingToCleansed"
  handler          = "landing_to_cleansed.lambda_handler"
  runtime          = "python3.9"
  filename         = "./../lambda/landing_to_cleansed.py.zip"
  source_code_hash = filebase64sha256("./../lambda/landing_to_cleansed.py.zip")
  role             = aws_iam_role.lambda_exec_role.arn
  timeout          = 3
  environment {
    variables = {
      CLEANSED_BUCKET = aws_s3_bucket.cleansed_zone.bucket
    }
  }
}

resource "aws_lambda_function" "cleansed_to_golden" {
  function_name    = "CleansedToGolden"
  handler          = "cleansed_to_golden.lambda_handler"
  runtime          = "python3.9"
  filename         = "./../lambda/cleansed_to_golden.py.zip"
  source_code_hash = filebase64sha256("./../lambda/cleansed_to_golden.py.zip")
  role             = aws_iam_role.lambda_exec_role.arn
  timeout          = 3
  environment {
    variables = {
      GOLDEN_BUCKET = aws_s3_bucket.golden_zone.bucket
    }
  }
}

output "dynamodb_table_name" {
  value = aws_dynamodb_table.items.name
}

resource "aws_lambda_permission" "allow_s3_landing" {
  statement_id  = "AllowExecutionFromS3Landing"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.landing_to_cleansed.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.landing_zone.arn
}

resource "aws_lambda_permission" "allow_s3_cleansed" {
  statement_id  = "AllowExecutionFromS3Cleansed"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.cleansed_to_golden.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.cleansed_zone.arn
}

resource "aws_s3_bucket_notification" "landing_trigger" {
  bucket = aws_s3_bucket.landing_zone.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.landing_to_cleansed.arn
    events              = ["s3:ObjectCreated:*"]
  }

  depends_on = [aws_lambda_permission.allow_s3_landing]
}

resource "aws_s3_bucket_notification" "cleansed_trigger" {
  bucket = aws_s3_bucket.cleansed_zone.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.cleansed_to_golden.arn
    events              = ["s3:ObjectCreated:*"]
  }

  depends_on = [aws_lambda_permission.allow_s3_cleansed]
}

resource "aws_lambda_function" "dynamo_ingest_lambda" {
  function_name    = "ScheduledDynamoIngest"
  handler          = "dynamo_ingest_lambda.lambda_handler"
  runtime          = "python3.9"
  filename         = "${path.module}/../lambda/dynamo_ingest_lambda.zip"
  source_code_hash = filebase64sha256("${path.module}/../lambda/dynamo_ingest_lambda.zip")
  role             = aws_iam_role.lambda_exec_role.arn
  timeout          = 5
}

resource "aws_cloudwatch_event_rule" "ingest_schedule" {
  name                = "dynamo-ingest-schedule"
  schedule_expression = "rate(5 minutes)"
}

resource "aws_cloudwatch_event_target" "invoke_ingest_lambda" {
  rule      = aws_cloudwatch_event_rule.ingest_schedule.name
  target_id = "dynamoIngestLambda"
  arn       = aws_lambda_function.dynamo_ingest_lambda.arn
}

resource "aws_lambda_permission" "allow_eventbridge_ingest" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.dynamo_ingest_lambda.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.ingest_schedule.arn
}

resource "aws_lambda_event_source_mapping" "dynamo_to_landing" {
  event_source_arn  = aws_dynamodb_table.items.stream_arn
  function_name     = aws_lambda_function.dynamo_stream_handler.arn
  starting_position = "LATEST"

  depends_on = [aws_lambda_function.dynamo_stream_handler]
}

resource "aws_iam_policy" "dynamo_stream_policy" {
  name        = "dynamo_stream_policy"
  description = "Allow Lambda to read DynamoDB stream"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:DescribeStream",
          "dynamodb:ListStreams"
        ],
        Resource = aws_dynamodb_table.items.stream_arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "dynamo_stream_attach" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.dynamo_stream_policy.arn
}

resource "aws_iam_policy" "dynamo_putitem_policy" {
  name        = "AllowDynamoPutItem"
  description = "Allow Lambda to PutItem into DynamoDB"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:PutItem"
        ],
        Resource = aws_dynamodb_table.items.arn
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "attach_putitem_to_lambda" {
  name       = "attach-putitem-to-lambda"
  roles      = [aws_iam_role.lambda_exec_role.name]
  policy_arn = aws_iam_policy.dynamo_putitem_policy.arn
}

resource "aws_iam_policy" "lambda_put_s3" {
  name        = "LambdaS3PutAccess"
  description = "Allow Lambda to PutObject in S3"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:PutObject"
        ],
        Resource = "arn:aws:s3:::dynamodb-landing-zone-example/*"
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "lambda_put_s3_attach" {
  name       = "lambda-put-s3-attach"
  roles      = [aws_iam_role.lambda_exec_role.name]
  policy_arn = aws_iam_policy.lambda_put_s3.arn
}

resource "aws_iam_policy" "lambda_get_s3" {
  name        = "LambdaS3GetAccess"
  description = "Allow Lambda to GetObject from S3"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject"
        ],
        Resource = "arn:aws:s3:::dynamodb-landing-zone-example/*"
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "lambda_get_s3_attach" {
  name       = "lambda-get-s3-attach"
  roles      = [aws_iam_role.lambda_exec_role.name]
  policy_arn = aws_iam_policy.lambda_get_s3.arn
}


resource "aws_glue_catalog_database" "data_lake" {
  name = "kp_datalake"
}

# IAM Role for Glue
resource "aws_iam_role" "glue_service_role" {
  name = "glue_service_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "glue.amazonaws.com"
      }
    }]
  })
}

# Custom IAM Policy for Glue (updated to allow access to actual S3 buckets)
resource "aws_iam_policy" "glue_full_access" {
  name = "GlueFullAccessPolicy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "glue:*"
        ],
        Resource = "*"
      },
      {
        Effect = "Allow",
        Action = "iam:PassRole",
        Resource = aws_iam_role.glue_service_role.arn
      },
      {
        Effect = "Allow",
        Action = [
          "s3:ListBucket",
          "s3:GetBucketLocation"
        ],
        Resource = [
          "arn:aws:s3:::${aws_s3_bucket.landing_zone.bucket}",
          "arn:aws:s3:::${aws_s3_bucket.cleansed_zone.bucket}",
          "arn:aws:s3:::${aws_s3_bucket.golden_zone.bucket}"
        ]
      },
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        Resource = [
          "arn:aws:s3:::${aws_s3_bucket.landing_zone.bucket}/*",
          "arn:aws:s3:::${aws_s3_bucket.cleansed_zone.bucket}/*",
          "arn:aws:s3:::${aws_s3_bucket.golden_zone.bucket}/*"
        ]
      }
    ]
  })
}

# Attach the custom policy to the Glue role
resource "aws_iam_role_policy_attachment" "glue_full_access_attach" {
  role       = aws_iam_role.glue_service_role.name
  policy_arn = aws_iam_policy.glue_full_access.arn
}

# Also attach the required AWS Glue service role
resource "aws_iam_role_policy_attachment" "glue_service_access" {
  role       = aws_iam_role.glue_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
}

# Crawler for landing zone
resource "aws_glue_crawler" "landing_zone" {
  name          = "crawler-landing"
  role          = aws_iam_role.glue_service_role.arn
  database_name = aws_glue_catalog_database.data_lake.name
  table_prefix  = "landing_"

  s3_target {
    path = "s3://${aws_s3_bucket.landing_zone.bucket}/"
  }

  configuration = jsonencode({
    Version = 1.0,
    CrawlerOutput = {
      Partitions = { AddOrUpdateBehavior = "InheritFromTable" }
    }
  })

  schedule = "cron(0/15 * * * ? *)"
}

# Crawler for cleansed zone
resource "aws_glue_crawler" "cleansed_zone" {
  name          = "crawler-cleansed"
  role          = aws_iam_role.glue_service_role.arn
  database_name = aws_glue_catalog_database.data_lake.name
  table_prefix  = "cleansed_"

  s3_target {
    path = "s3://${aws_s3_bucket.cleansed_zone.bucket}/"
  }

  schedule = "cron(5/15 * * * ? *)"
}

# Crawler for golden zone
resource "aws_glue_crawler" "golden_zone" {
  name          = "crawler-golden"
  role          = aws_iam_role.glue_service_role.arn
  database_name = aws_glue_catalog_database.data_lake.name
  table_prefix  = "golden_"

  s3_target {
    path = "s3://${aws_s3_bucket.golden_zone.bucket}/"
  }

  schedule = "cron(10/15 * * * ? *)"
}

# Athena Workgroup
resource "aws_athena_workgroup" "datalake" {
  name = "kp_datalake_workgroup"
  configuration {
    result_configuration {
      output_location = "s3://${aws_s3_bucket.golden_zone.bucket}/athena-results/"
    }
  }
}